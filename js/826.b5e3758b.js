"use strict";(self["webpackChunkyt_stats_quasar"]=self["webpackChunkyt_stats_quasar"]||[]).push([[826],{3308:(e,t,n)=>{n.d(t,{Z:()=>c});n(71),n(9377),n(7664);var a=n(6395),s=n(2661),o=n(52),r=n.n(o);class c{constructor(){}static get unngroupedGroupingName(){return"[Ungrouped]"}async _fetchViewsData(e,t){const n=s.ZP.extractDate(e,"YYYY/MM/DD"),a=s.ZP.addToDate(n,{days:-1}),o=s.ZP.extractDate(t,"YYYY/MM/DD"),c=await this.getChannels(),i=await r().get("./data/views.json"),u=i.data;var l=a;const h={inclusiveFrom:!0,inclusiveTo:!0},f={},g={};while(s.ZP.isBetweenDates(l,a,o,h)){const e=s.ZP.formatDate(l,"MMMM_DD_YYYY");l=s.ZP.addToDate(l,{days:1}),g[e]={},u.hasOwnProperty(e)&&c.forEach((t=>{const n=t.id;if(!u[e].hasOwnProperty(n))return;const a=u[e][n];if(f.hasOwnProperty(n)){const t=Math.max(0,a-f[n]);g[e][n]=t}f[n]=a}))}const d=s.ZP.formatDate(a,"MMMM_DD_YYYY");return delete g[d],g}async fetchData(e,t){const n=await this._fetchViewsData(e,t),a=await this.getChannelGroupings(),s=this._getChannelIdToGroupingMap(a),o=this._calculateViewsByGrouping(n,a,s),r=this._calculateViewsByDayAndGrouping(n,a,s),c=this._calculateViewsByDayOfWeekAndGrouping(n,a,s),i=this._calculateViewsByChannelAndCollectByGrouping(n,a,o),u=this._calculateViewsByDayAndChannel(n,a),l={viewsByGrouping:o,viewsByDayAndGrouping:r,viewsByDayOfWeekAndGrouping:c,viewsByChannelCollectedByGrouping:i,viewsByDayAndChannel:u};return Promise.resolve(l)}_calculateViewsByDayAndGrouping(e,t,n){const a=Object.keys(e),o=[];return Object.keys(t).forEach((t=>{const r=[];a.forEach((a=>{const o=e[a],c=s.ZP.extractDate(a,"MMMM_D_YYYY").getTime();var i=0;for(const[e,s]of Object.entries(o))n[e]===t&&(i+=s);r.push([c,i])})),o.push({name:t,data:r})})),o}_calculateViewsByDayOfWeekAndGrouping(e,t,n){const a=Object.keys(e),o={};return Object.keys(t).forEach((e=>{o[e]={name:e,data:[0,0,0,0,0,0,0]}})),a.forEach((t=>{const a=s.ZP.extractDate(t,"MMMM_D_YYYY").getDay(),r=e[t];for(const[e,s]of Object.entries(r)){const t=n[e];o[t].data[a]+=s}})),Object.values(o)}_calculateViewsByGrouping(e,t,n){const a={};Object.keys(t).forEach((e=>{a[e]=0}));for(const[s,o]of Object.entries(e))for(const[e,t]of Object.entries(o)){const s=n[e];a[s]+=t}return a}_calculateViewsByDayAndChannel(e,t){const n=Object.keys(e),a=Object.values(t).flat(),o=[];a.forEach((t=>{const a=[];n.forEach((n=>{const o=e[n],r=s.ZP.extractDate(n,"MMMM_D_YYYY").getTime();o.hasOwnProperty(t.id)?a.push([r,o[t.id]]):a.push([r,0])}));const r=a.reduce(((e,t)=>t[1]+e),0);o.push({name:t.name,data:a,totalViews:r})}));const r=o.reduce(((e,t)=>t.totalViews+e),0),c=o.map((e=>(e["percentageOfTotlaViews"]=e.totalViews/r,e)));return c}_calculateViewsByChannelAndCollectByGrouping(e,t,n){const a={};for(const[o,r]of Object.entries(t))r.forEach((e=>{a[e.id]=0}));for(const[o,r]of Object.entries(e))for(const[e,t]of Object.entries(r))a[e]+=t;const s=[];for(const[o,r]of Object.entries(t)){const e=[];r.forEach((t=>{e.push({x:t.name,y:a[t.id],url:t.url,id:t.id,shareOfGrouping:(100*a[t.id]/n[o]).toFixed(1)})})),s.push({name:o,data:e})}return s}_getChannelIdToGroupingMap(e){const t={};for(const[n,a]of Object.entries(e))a.forEach((e=>{t[e.id]=n}));return t}saveCustomChannelGroupings(e){const t=Object.keys(e);t.forEach((t=>{0==e[t].length&&delete e[t]})),a.Z.set("customChannelGroupings",e)}getCustomChannelGroupings(){return a.Z.getItem("customChannelGroupings")}async getChannels(){const e=await this.getDefaultChannelGroupings(),t=Object.values(e).flat();return Promise.resolve(Object.values(t).flat())}async getDefaultChannelGroupings(){const e=await r().get("./data/default-channel-groupings.json");return Promise.resolve(e.data)}async getChannelGroupings(){var e=await this.getDefaultChannelGroupings(),t=this.getCustomChannelGroupings();if(null===t)return Promise.resolve(e);const n=Object.values(t).flat().map((e=>e.id)),a=Object.values(e).flat().map((e=>e.id));if(n.length==a.length)return Promise.resolve(t);const s=a.filter((e=>!n.includes(e))),o=c.unngroupedGroupingName;t.hasOwnProperty(o)||(t[o]=[]);const r=Object.values(e).flat(),i=r.filter((e=>s.includes(e.id)));t[o]=t[o].concat(i);const u=Object.keys(t);return u.forEach((e=>{0==t[e].length&&delete t[e]})),this.saveCustomChannelGroupings(t),Promise.resolve(t)}}},826:(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});var a=n(2323);function s(e,t,n,s,o,r){return" default content "+(0,a.zw)(s.lists)}var o=n(1959),r=n(3308);const c={setup(e,{emit:t}){const n=new r.Z,a=(0,o.iH)([]);return n.getChannelGroupings().then((e=>{a.value=e})).catch((e=>console.log(e))),{lists:a}}};c.render=s;const i=c}}]);