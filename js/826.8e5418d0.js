"use strict";(self["webpackChunkyt_stats_quasar"]=self["webpackChunkyt_stats_quasar"]||[]).push([[826],{3308:(e,t,a)=>{a.d(t,{Z:()=>c});a(71),a(9377),a(7664);var n=a(6395),s=a(2661),o=a(52),r=a.n(o);class c{constructor(){}static get unngroupedGroupingName(){return"[Ungrouped]"}async _fetchViewsData(e,t){const a=s.ZP.extractDate(e,"YYYY/MM/DD"),n=s.ZP.extractDate(t,"YYYY/MM/DD");await this.getChannels();var o=await r().get("./data/metadata.json");const c=o.data,i=c["viewDeltaFiles"],u={},l=[],h={inclusiveFrom:!0,inclusiveTo:!0};i.forEach((e=>{const t=s.ZP.extractDate(e["start"],"MMMM_DD_YYYY"),o=s.ZP.extractDate(e["end"],"MMMM_DD_YYYY");(s.ZP.isBetweenDates(a,t,o,h)||s.ZP.isBetweenDates(n,t,o,h))&&l.push(r().get("./data/"+e["fileName"]))}));const g=await Promise.all(l);return g.forEach((e=>{Object.keys(e.data).forEach((t=>{const o=s.ZP.extractDate(t,"MMMM_DD_YYYY");s.ZP.isBetweenDates(o,a,n,h)&&(u[t]=e.data[t])}))})),u}async fetchData(e,t){const a=await this._fetchViewsData(e,t),n=await this.getChannelGroupings(),s=this._getChannelIdToGroupingMap(n),o=this._calculateViewsByGrouping(a,n,s),r=this._calculateViewsByDayAndGrouping(a,n,s),c=this._calculateViewsByDayOfWeekAndGrouping(a,n,s),i=this._calculateViewsByChannelAndCollectByGrouping(a,n,o),u=this._calculateViewsByDayAndChannel(a,n),l={viewsByGrouping:o,viewsByDayAndGrouping:r,viewsByDayOfWeekAndGrouping:c,viewsByChannelCollectedByGrouping:i,viewsByDayAndChannel:u};return Promise.resolve(l)}_calculateViewsByDayAndGrouping(e,t,a){const n=Object.keys(e),o=[];return Object.keys(t).forEach((t=>{const r=[];n.forEach((n=>{const o=e[n],c=s.ZP.extractDate(n,"MMMM_D_YYYY").getTime();var i=0;for(const[e,s]of Object.entries(o))a[e]===t&&(i+=s);r.push([c,i])})),o.push({name:t,data:r})})),o}_calculateViewsByDayOfWeekAndGrouping(e,t,a){const n=Object.keys(e),o={};return Object.keys(t).forEach((e=>{o[e]={name:e,data:[0,0,0,0,0,0,0]}})),n.forEach((t=>{const n=s.ZP.extractDate(t,"MMMM_D_YYYY").getDay(),r=e[t];for(const[e,s]of Object.entries(r)){const t=a[e];o[t].data[n]+=s}})),Object.values(o)}_calculateViewsByGrouping(e,t,a){const n={};Object.keys(t).forEach((e=>{n[e]=0}));for(const[s,o]of Object.entries(e))for(const[e,t]of Object.entries(o)){const s=a[e];n[s]+=t}return n}_calculateViewsByDayAndChannel(e,t){const a=Object.keys(e),n=Object.values(t).flat(),o=[];n.forEach((t=>{const n=[];a.forEach((a=>{const o=e[a],r=s.ZP.extractDate(a,"MMMM_D_YYYY").getTime();o.hasOwnProperty(t.id)?n.push([r,o[t.id]]):n.push([r,0])}));const r=n.reduce(((e,t)=>t[1]+e),0);o.push({name:t.name,data:n,totalViews:r})}));const r=o.reduce(((e,t)=>t.totalViews+e),0),c=o.map((e=>(e["percentageOfTotlaViews"]=e.totalViews/r,e)));return c}_calculateViewsByChannelAndCollectByGrouping(e,t,a){const n={};for(const[o,r]of Object.entries(t))r.forEach((e=>{n[e.id]=0}));for(const[o,r]of Object.entries(e))for(const[e,t]of Object.entries(r))n[e]+=t;const s=[];for(const[o,r]of Object.entries(t)){const e=[];r.forEach((t=>{e.push({x:t.name,y:n[t.id],url:t.url,id:t.id,shareOfGrouping:(100*n[t.id]/a[o]).toFixed(1)})})),s.push({name:o,data:e})}return s}_getChannelIdToGroupingMap(e){const t={};for(const[a,n]of Object.entries(e))n.forEach((e=>{t[e.id]=a}));return t}saveCustomChannelGroupings(e){const t=Object.keys(e);t.forEach((t=>{0==e[t].length&&delete e[t]})),n.Z.set("customChannelGroupings",e)}getCustomChannelGroupings(){return n.Z.getItem("customChannelGroupings")}async getChannels(){const e=await r().get("./data/metadata.json");return Promise.resolve(Object.values(e.data["channels"]))}async getDefaultChannelGroupings(){const e=await r().get("./data/default-channel-groupings.json");return Promise.resolve(e.data)}async getChannelGroupings(){var e=await this.getDefaultChannelGroupings(),t=this.getCustomChannelGroupings();if(null===t)return Promise.resolve(e);const a=Object.values(t).flat().map((e=>e.id)),n=Object.values(e).flat().map((e=>e.id));if(a.length==n.length)return Promise.resolve(t);const s=n.filter((e=>!a.includes(e))),o=c.unngroupedGroupingName;t.hasOwnProperty(o)||(t[o]=[]);const r=Object.values(e).flat(),i=r.filter((e=>s.includes(e.id)));t[o]=t[o].concat(i);const u=Object.keys(t);return u.forEach((e=>{0==t[e].length&&delete t[e]})),this.saveCustomChannelGroupings(t),Promise.resolve(t)}}},826:(e,t,a)=>{a.r(t),a.d(t,{default:()=>i});var n=a(2323);function s(e,t,a,s,o,r){return" default content "+(0,n.zw)(s.lists)}var o=a(1959),r=a(3308);const c={setup(e,{emit:t}){const a=new r.Z,n=(0,o.iH)([]);return a.getChannelGroupings().then((e=>{n.value=e})).catch((e=>console.log(e))),{lists:n}}};c.render=s;const i=c}}]);