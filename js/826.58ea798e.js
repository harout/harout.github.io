"use strict";(self["webpackChunkyt_stats_quasar"]=self["webpackChunkyt_stats_quasar"]||[]).push([[826],{3308:(e,t,a)=>{a.d(t,{Z:()=>o});a(71),a(7098),a(9377),a(7664);var s=a(6395),n=a(5616),r=a(52),c=a.n(r);class o{constructor(){}static get unngroupedGroupingName(){return"[Ungrouped]"}async _fetchMetadata(){var e=await c().get("./data/metadata.json");return Promise.resolve(e.data)}async _fetchViewsData(e,t,a){const s=n.ZP.extractDate(e,"YYYY/MM/DD"),r=n.ZP.extractDate(t,"YYYY/MM/DD"),o=a["viewDeltaFiles"],i={},u=[],l={inclusiveFrom:!0,inclusiveTo:!0};o.forEach((e=>{const t=n.ZP.extractDate(e["start"],"MMMM_DD_YYYY"),a=n.ZP.extractDate(e["end"],"MMMM_DD_YYYY");t<=r&&s<=a&&u.push(c().get("./data/"+e["fileName"]))}));const h=await Promise.all(u);return h.forEach((e=>{Object.keys(e.data).forEach((t=>{const a=n.ZP.extractDate(t,"MMMM_DD_YYYY");n.ZP.isBetweenDates(a,s,r,l)&&(i[t]=e.data[t])}))})),i}async _fetchSubscriberCounts(e,t,a){const s=n.ZP.extractDate(e,"YYYY/MM/DD"),r=n.ZP.extractDate(t,"YYYY/MM/DD"),o=(await this.getChannels(),a["subscriberCountsFiles"]),i={},u=[],l={inclusiveFrom:!0,inclusiveTo:!0};o.forEach((e=>{const t=n.ZP.extractDate(e["start"],"MMMM_DD_YYYY"),a=n.ZP.extractDate(e["end"],"MMMM_DD_YYYY");t<=r&&s<=a&&u.push(c().get("./data/"+e["fileName"]))}));const h=await Promise.all(u);return h.forEach((e=>{Object.keys(e.data).forEach((t=>{const a=n.ZP.extractDate(t,"MMMM_DD_YYYY");n.ZP.isBetweenDates(a,s,r,l)&&(i[t]=e.data[t])}))})),i}async fetchChannelData(e,t,a){const s=await this._fetchMetadata(),r=s["channels"][a],c=await this._fetchViewsData(e,t,s),o=await this._fetchSubscriberCounts(e,t,s),i=Object.keys(c),u=[],l=[],h=[],d=[0,0,0,0,0,0,0];i.forEach((e=>{const t=c[e],s=o[e],r=n.ZP.extractDate(e,"MMMM_DD_YYYY").getTime(),i=n.ZP.extractDate(e,"MMMM_DD_YYYY").getDay(),f=Object.values(t).reduce(((e,t)=>t+e),0);if(t.hasOwnProperty(a)){u.push([r,t[a]]),d[i]+=t[a];const e=(100*t[a]/f).toFixed(1);h.push([r,e])}else u.push([r,0]),h.push([r,0]);s.hasOwnProperty(a)?l.push([r,s[a]]):l.push([r,0])}));const f={viewsByDay:{name:"",data:u},subscribersByDay:{name:"",data:l},viewsByDayOfWeek:{name:"",data:d},shareByDay:{name:"",data:h},channelData:r};return Promise.resolve(f)}async fetchData(e,t){const a=await this._fetchMetadata(),s=await this._fetchViewsData(e,t,a),n=await this._fetchSubscriberCounts(e,t,a),r=await this.getChannels(),c=await this._calculateTotalViewsAndSubscribersByChannel(s,n,r),o=await this.getChannelGroupings(),i=this._getChannelIdToGroupingMap(o),u=this._calculateViewsByGrouping(s,o,i),l=this._calculateViewsByDayAndGrouping(s,o,i),h=this._calculateViewsByDayOfWeekAndGrouping(s,o,i),d=this._calculateViewsByChannelAndCollectByGrouping(s,o,u),f=this._calculateViewsByDayAndChannel(s,o),D={viewsByGrouping:u,viewsByDayAndGrouping:l,viewsByDayOfWeekAndGrouping:h,viewsByChannelCollectedByGrouping:d,viewsByDayAndChannel:f,subscriberCounts:n,viewsAndSubscribersTotals:c};return Promise.resolve(D)}_calculateViewsByDayAndGrouping(e,t,a){const s=Object.keys(e),r=[];return Object.keys(t).forEach((t=>{const c=[];s.forEach((s=>{const r=e[s],o=n.ZP.extractDate(s,"MMMM_DD_YYYY").getTime();var i=0;for(const[e,n]of Object.entries(r))a[e]===t&&(i+=n);c.push([o,i])})),r.push({name:t,data:c})})),r}_calculateViewsByDayOfWeekAndGrouping(e,t,a){const s=Object.keys(e),r={};return Object.keys(t).forEach((e=>{r[e]={name:e,data:[0,0,0,0,0,0,0]}})),s.forEach((t=>{const s=n.ZP.extractDate(t,"MMMM_DD_YYYY").getDay(),c=e[t];for(const[e,n]of Object.entries(c)){const t=a[e];r[t].data[s]+=n}})),Object.values(r)}_calculateViewsByGrouping(e,t,a){const s={};Object.keys(t).forEach((e=>{s[e]=0}));for(const[n,r]of Object.entries(e))for(const[e,t]of Object.entries(r)){const n=a[e];s[n]+=t}return s}_calculateTotalViewsAndSubscribersByChannel(e,t,a){const s=a.map((e=>e.id)),n=Object.keys(e);var r=0;const c={},o={};s.forEach((e=>{c[e]=[],o[e]=[]}));const i={};a.forEach((e=>{i[e.id]=e})),n.forEach((a=>{Object.entries(e[a]).forEach((e=>{c[e[0]].push(e[1]),r+=e[1]})),Object.entries(t[a]).forEach((e=>{o[e[0]].push(e[1])}))}));const u=[];return Object.keys(c).forEach((e=>{const t=c[e],a=o[e],s=t.reduce(((e,t)=>e+t),0),n=a.reduce(((e,t)=>e+t),0),l=n/a.length,h={name:i[e]["name"],id:parseInt(e),share:parseFloat((100*s/r).toFixed(1)),subscribers:parseFloat(l.toFixed(0)),views:s,data:[[l,s]]};u.push(h)})),u.sort(((e,t)=>t.data[0][0]<e.data[0][0]?-1:t.data[0][0]>e.data[0][0]?1:0)),u}_calculateViewsByDayAndChannel(e,t){const a=Object.keys(e),s=Object.values(t).flat(),r=[];s.forEach((t=>{const s=[];a.forEach((a=>{const r=e[a],c=n.ZP.extractDate(a,"MMMM_DD_YYYY").getTime();r.hasOwnProperty(t.id)?s.push([c,r[t.id]]):s.push([c,0])}));const c=s.reduce(((e,t)=>t[1]+e),0);r.push({name:t.name,data:s,totalViews:c})}));const c=r.reduce(((e,t)=>t.totalViews+e),0),o=r.map((e=>(e["percentageOfTotalViews"]=e.totalViews/c,e)));return o}_calculateViewsByChannelAndCollectByGrouping(e,t,a){const s={};for(const[r,c]of Object.entries(t))c.forEach((e=>{s[e.id]=0}));for(const[r,c]of Object.entries(e))for(const[e,t]of Object.entries(c))s[e]+=t;const n=[];for(const[r,c]of Object.entries(t)){const e=[];c.forEach((t=>{e.push({x:t.name,y:s[t.id],url:t.url,id:t.id,shareOfGrouping:(100*s[t.id]/a[r]).toFixed(1)})})),n.push({name:r,data:e})}return n}_getChannelIdToGroupingMap(e){const t={};for(const[a,s]of Object.entries(e))s.forEach((e=>{t[e.id]=a}));return t}saveCustomChannelGroupings(e){const t=Object.keys(e);t.forEach((t=>{0==e[t].length&&delete e[t]})),s.Z.set("customChannelGroupings",e)}getCustomChannelGroupings(){return s.Z.getItem("customChannelGroupings")}async getChannels(){const e=await c().get("./data/metadata.json");return Promise.resolve(Object.values(e.data["channels"]))}async getDefaultChannelGroupings(){const e=await c().get("./data/default-channel-groupings.json");return Promise.resolve(e.data)}async getChannelGroupings(){var e=await this.getDefaultChannelGroupings(),t=this.getCustomChannelGroupings();if(null===t)return Promise.resolve(e);const a=Object.values(t).flat().map((e=>e.id)),s=Object.values(e).flat().map((e=>e.id));if(a.length==s.length)return Promise.resolve(t);const n=s.filter((e=>!a.includes(e))),r=o.unngroupedGroupingName;t.hasOwnProperty(r)||(t[r]=[]);const c=Object.values(e).flat(),i=c.filter((e=>n.includes(e.id)));t[r]=t[r].concat(i);const u=Object.keys(t);return u.forEach((e=>{0==t[e].length&&delete t[e]})),this.saveCustomChannelGroupings(t),Promise.resolve(t)}}},826:(e,t,a)=>{a.r(t),a.d(t,{default:()=>i});var s=a(2323);function n(e,t,a,n,r,c){return" default content "+(0,s.zw)(n.lists)}var r=a(1959),c=a(3308);const o={setup(e,{emit:t}){const a=new c.Z,s=(0,r.iH)([]);return a.getChannelGroupings().then((e=>{s.value=e})).catch((e=>console.log(e))),{lists:s}}};o.render=n;const i=o}}]);